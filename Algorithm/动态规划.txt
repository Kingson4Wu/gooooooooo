使用动态规划解决三个常见的子序列问题：
1、最长公共子序列问题（LCS，longest-common-subsequence problem）
2、最长连续公共子序列问题
3、最长递增子序列（LIS，longest-increment-subsequence）

动态规划
时间复杂度O(M*N)，空间复杂度O(M*N)。

+ 最长公共子序列问题
时间复杂度O(M*N)，空间复杂度O(M*N)。

c[i,j]=
{
    0,若i=0或j=0
    c[i−1,j−1]+1,若i,j>0且xi=yj
    max(c[i,j−1],c[i−1,j]),若i,j>0且xi≠yj
}    

+ 最长公共连续子序列（最长公共子串）
时间复杂度O(M*N)，空间复杂度O(M*N)。
类似最长公共子序列的分析，这里，我们使用c[i,j] 表示 以 Xi 和 Yj 结尾的最长公共子串的长度，因为要求子串连续，所以对于 Xi 与 Yj 来讲，它们要么与之前的公共子串构成新的公共子串；要么就是不构成公共子串。故状态转移方程
x[i-1] == y[j-1] , c[i,j]= c[i-1,j-1] +1
x[i-1] != y[j-1] , c[i,j]= 0
c[i,j] > maxLen , maxLen = c[i,j]

+ 最长递增子序列
给定一个序列X=<x1,x2,...,xm>，求X的最长递增子序列。（子序列可以是不连续的，比如{5,6,7,1,2,8} 的LIS是5,6,7,8
最长递增子序列的三种算法:<https://blog.csdn.net/u013178472/article/details/54926531>
1. 解法1：最长公共子序列法
转换为最长公共子序列问题。如例子中的数组A{5，6， 7， 1， 2， 8}，则我们排序该数组得到数组A‘{1， 2， 5， 6， 7， 8}，然后找出数组A和A’的最长公共子序列即可。显然这里最长公共子序列为{5, 6, 7, 8}，也就是原数组A最长递增子序列。
2. 动态规划法
时间复杂度O(N^2)，空间复杂度O(N)。
3. O(NlgN）算法

Algorithm/delete-operation-for-two-strings.txt
Algorithm/number-of-longest-increasing-subsequence.txt


